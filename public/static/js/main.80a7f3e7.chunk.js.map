{"version":3,"sources":["portal/Spinner.tsx","Components/FallBackSpinner.tsx","Components/LogoutButton.tsx","redux/User/user.action.ts","Components/AlertMessage.tsx","Components/ErrorBoundary.tsx","App.tsx","serviceWorker.ts","index.tsx","redux/User/user.reducer.ts","redux/alert/alert.reducer.ts","redux/Port/port.reducer.ts","redux/loading/loading.reducer.ts","redux/rootReducer.ts","redux/store.ts","generated/graphql.tsx","Context/storeOffset.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","display","marginLeft","spacing","width","height","justifyContent","backgroundColor","alignItems","minHeight","position","top","left","zIndex","Container","document","createElement","SpinnerRoot","querySelector","Spinner","isLoading","classes","React","useEffect","appendChild","removeChild","ReactDOM","createPortal","className","color","FallBackSpinner","CircularProgress","button","margin","bottom","right","transition","connector","connect","state","currentUser","userReducer","SetUser","user","type","payload","useLogOutMutation","logOut","loading","handleLogout","a","Button","onClick","variant","startIcon","AlertContainer","styled","div","AlertBox","Alert","alert","minWidth","maxWidth","alerts","alertReducer","length","map","key","id","severity","AlertTitle","style","textTransform","message","ErrorBoundary","redirect","hasError","error","info","console","this","setTimeout","setState","to","placeItems","textDecoration","props","children","Component","HomePage","lazy","PortfolioPage","PageNotFound","axios","get","then","res","store","dispatch","data","catch","err","App","useMeQuery","me","fallback","exact","path","component","render","window","location","search","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","client","ApolloClient","uri","credentials","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","INITIAL_STATE","currentPort","ports","combineReducers","action","filter","portReducer","loadReducer","middleWares","reduxThunk","createStore","rootReducer","applyMiddleware","DeleteWorkDocument","gql","useDeleteWorkMutation","baseOptions","ApolloReactHooks","EditAboutDocument","useEditAboutMutation","EditLandingDocument","useEditLandingMutation","EditResumeDocument","useEditResumeMutation","EditWorkDocument","useEditWorkMutation","LogOutDocument","MeDocument","WhoPortDocument","useWhoPortQuery","OffSetContext","createContext","OffSetContextProvider","useState","landing","project","about","resume","offset","setOffSet","Provider","value"],"mappings":"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","file":"static/js/main.80a7f3e7.chunk.js","sourcesContent":["import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      display: \"flex\",\r\n      \"& > * + *\": {\r\n        marginLeft: theme.spacing(2),\r\n      },\r\n      width: \"100%\",\r\n      height: \"100%\",\r\n      justifyContent: \"center\",\r\n      backgroundColor: \"rgba(0,0,0,0.9)\",\r\n      alignItems: \"center\",\r\n      minHeight: \"100vh\",\r\n      position: \"fixed\",\r\n      top: 0,\r\n      left: 0,\r\n      zIndex: 9999,\r\n    },\r\n  })\r\n);\r\n\r\ntype Props = {\r\n  isLoading: Boolean;\r\n};\r\n\r\nconst Container = document.createElement(\"div\");\r\nconst SpinnerRoot = document.querySelector(\"#spinner\");\r\n\r\nexport default function Spinner({\r\n  isLoading,\r\n}: Props): React.ReactElement | null {\r\n  const classes = useStyles();\r\n\r\n  React.useEffect(() => {\r\n    SpinnerRoot?.appendChild(Container);\r\n    return () => {\r\n      SpinnerRoot?.removeChild(Container);\r\n    };\r\n  }, []);\r\n\r\n  if (isLoading) {\r\n    return ReactDOM.createPortal(\r\n      <div className={classes.root}>\r\n        <CircularProgress color=\"secondary\" />\r\n      </div>,\r\n      Container\r\n    );\r\n  } else {\r\n    return null;\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      display: \"flex\",\r\n      \"& > * + *\": {\r\n        marginLeft: theme.spacing(2),\r\n      },\r\n      width: \"100%\",\r\n      height: \"100%\",\r\n      justifyContent: \"center\",\r\n      backgroundColor: \"rgba(0,0,0,0.9)\",\r\n      alignItems: \"center\",\r\n      minHeight: \"100vh\",\r\n      position: \"fixed\",\r\n      top: 0,\r\n      left: 0,\r\n      zIndex: 9999,\r\n    },\r\n  })\r\n);\r\n\r\nexport default function FallBackSpinner() {\r\n  const classes = useStyles();\r\n  return (\r\n    <div className={classes.root}>\r\n      <CircularProgress color=\"secondary\" />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { connect, ConnectedProps } from \"react-redux\";\r\nimport { MyReducers } from \"../redux/rootReducer\";\r\nimport { Button } from \"@material-ui/core/\";\r\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\r\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\r\nimport { useLogOutMutation } from \"../generated/graphql\";\r\nimport { SetUser } from \"../redux/User/user.action\";\r\nimport FallBackSpinner from \"./FallBackSpinner\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    button: {\r\n      margin: theme.spacing(1),\r\n      position: \"fixed\",\r\n      bottom: 0,\r\n      right: 0,\r\n      transition: \"all .5s ease-out\",\r\n    },\r\n  })\r\n);\r\nconst LogoutButton = ({\r\n  currentUser,\r\n  SetUser,\r\n}: Props): React.ReactElement | null => {\r\n  const classes = useStyles();\r\n  const [logOut, { loading }] = useLogOutMutation();\r\n\r\n  const handleLogout = async () => {\r\n    await logOut();\r\n    SetUser(null);\r\n  };\r\n\r\n  if (!currentUser) return null;\r\n  if (loading) return <FallBackSpinner />;\r\n  return (\r\n    <Button\r\n      onClick={handleLogout}\r\n      variant=\"contained\"\r\n      color=\"secondary\"\r\n      className={classes.button}\r\n      startIcon={<ExitToAppIcon />}\r\n    >\r\n      LogOut\r\n    </Button>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: MyReducers) => ({\r\n  currentUser: state.userReducer.currentUser,\r\n});\r\n\r\nconst connector = connect(mapStateToProps, { SetUser });\r\n\r\ntype PropsFromRedux = ConnectedProps<typeof connector>;\r\n\r\ntype Props = PropsFromRedux;\r\n\r\nexport default connector(LogoutButton);\r\n","import { currentUser, UserTypes } from \"./user.interface\";\r\n\r\nexport const SetUser = (user: currentUser | null): UserTypes => ({\r\n  type: \"SetUser\",\r\n  payload: user,\r\n});\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport styled from \"styled-components\";\r\nimport { Alert, AlertTitle } from \"@material-ui/lab\";\r\nimport { connect, ConnectedProps } from \"react-redux\";\r\nimport { MyReducers } from \"../redux/rootReducer\";\r\n\r\nconst AlertContainer = styled.div`\r\n  position: fixed;\r\n  top: 70px;\r\n  right: 10px;\r\n  z-index: 99999999;\r\n`;\r\n\r\nconst AlertBox = styled(Alert)`\r\n  animation: slide 0.5s ease;\r\n  @keyframes slide {\r\n    from {\r\n      transform: translateY(200%);\r\n    }\r\n  }\r\n`;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  alert: {\r\n    margin: 10,\r\n    minWidth: 280,\r\n    backgroundColor: \"white\",\r\n    maxWidth: 280,\r\n  },\r\n}));\r\n\r\nconst AlertMessage = ({ alerts }: Props) => {\r\n  const classes = useStyles();\r\n  if (alerts.length < 1) return null;\r\n  return (\r\n    <AlertContainer>\r\n      {alerts.map((alert) => (\r\n        <AlertBox\r\n          key={alert.id}\r\n          variant=\"outlined\"\r\n          severity={alert.type}\r\n          className={classes.alert}\r\n        >\r\n          <AlertTitle style={{ textTransform: \"capitalize\" }}>\r\n            {alert.type}\r\n          </AlertTitle>\r\n          <strong>{alert.message}</strong>\r\n        </AlertBox>\r\n      ))}\r\n    </AlertContainer>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: MyReducers) => ({\r\n  alerts: state.alertReducer.alerts,\r\n});\r\n\r\nconst connector = connect(mapStateToProps);\r\n\r\ntype PropsFromRedux = ConnectedProps<typeof connector>;\r\n\r\ntype Props = PropsFromRedux;\r\n\r\nexport default connector(AlertMessage);\r\n","import React, { Component, ErrorInfo } from \"react\";\r\nimport { Link, Redirect } from \"react-router-dom\";\r\n\r\nclass ErrorBoundary extends Component {\r\n  // deletes the constructor...\r\n  //constructor(props) {\r\n  // super(props);\r\n  // this.state = { hasError: false, redirect: false };\r\n  // }\r\n\r\n  public state = {\r\n    redirect: \"\",\r\n    hasError: false,\r\n  };\r\n  public static getDerivedStateFromError() {\r\n    return { hasError: true };\r\n  }\r\n  // set the types for error  and info\r\n  public componentDidCatch(error: Error, info: ErrorInfo) {\r\n    console.error(\"ErrorBoundary caught an error\", error, info);\r\n  }\r\n  public componentDidUpdate() {\r\n    if (this.state.hasError) {\r\n      setTimeout(() => this.setState({ redirect: true }), 5000);\r\n    }\r\n  }\r\n\r\n  public render() {\r\n    if (this.state.redirect) {\r\n      return <Redirect to=\"/\" />;\r\n    }\r\n\r\n    if (this.state.hasError) {\r\n      return (\r\n        <div\r\n          style={{\r\n            width: \"100%\",\r\n            minHeight: \"100vh\",\r\n            display: \"grid\",\r\n            placeItems: \"center\",\r\n          }}\r\n        >\r\n          <h3>\r\n            404 Page not found.{\" \"}\r\n            <Link to=\"/\" style={{ color: \"#f50057\", textDecoration: \"none\" }}>\r\n              Back home\r\n            </Link>\r\n          </h3>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React, { lazy, Suspense } from \"react\";\r\nimport { Route, Switch, Redirect } from \"react-router-dom\";\r\nimport { useMeQuery } from \"./generated/graphql\";\r\nimport store from \"./redux/store\";\r\nimport Spinner from \"./portal/Spinner\";\r\nimport { OffSetContextProvider } from \"./Context/storeOffset\";\r\nimport LogoutButton from \"./Components/LogoutButton\";\r\nimport AlertMessage from \"./Components/AlertMessage\";\r\nimport ErrorBoundary from \"./Components/ErrorBoundary\";\r\nimport axios from \"axios\";\r\nimport FallBackSpinner from \"./Components/FallBackSpinner\";\r\n\r\nconst HomePage = lazy(() => import(\"./Container/HomePage\"));\r\nconst PortfolioPage = lazy(() => import(\"./Container/PortfolioPage\"));\r\nconst PageNotFound = lazy(() => import(\"./Container/PageNotFound\"));\r\n\r\naxios\r\n  .get(\"/api/portfolios\")\r\n  .then((res) => {\r\n    store.dispatch({ type: \"SetPorts\", payload: res.data });\r\n  })\r\n  .catch((err) => console.error(err));\r\n\r\nconst App = (): React.ReactElement => {\r\n  const { data, loading } = useMeQuery();\r\n\r\n  React.useEffect(() => {\r\n    if (data) {\r\n      store.dispatch({ type: \"SetUser\", payload: data.me });\r\n    }\r\n  }, [data]);\r\n\r\n  return (\r\n    <OffSetContextProvider>\r\n      <AlertMessage />\r\n      <LogoutButton />\r\n      <Switch>\r\n        <ErrorBoundary>\r\n          <Suspense fallback={<FallBackSpinner />}>\r\n            <Route exact path=\"/\" component={HomePage} />\r\n            <Route path=\"/port/:id\" component={PortfolioPage} />\r\n            <Route\r\n              render={() => {\r\n                return window.location.search ? (\r\n                  <Redirect to=\"/\" />\r\n                ) : (\r\n                  <PageNotFound />\r\n                );\r\n              }}\r\n            />\r\n          </Suspense>\r\n        </ErrorBoundary>\r\n      </Switch>\r\n      <Spinner isLoading={loading} />\r\n    </OffSetContextProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport { ApolloProvider } from \"@apollo/react-hooks\";\r\nimport { Provider } from \"react-redux\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport store from \"./redux/store\";\r\nimport ApolloClient from \"apollo-boost\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nconst client = new ApolloClient({\r\n  uri: \"/graphql\",\r\n  credentials: \"include\",\r\n});\r\n\r\nReactDOM.render(\r\n  <ApolloProvider client={client as any}>\r\n    <Provider store={store}>\r\n      <BrowserRouter>\r\n        <App />\r\n      </BrowserRouter>\r\n    </Provider>\r\n  </ApolloProvider>,\r\n  document.querySelector(\"#root\")\r\n);\r\n\r\nserviceWorker.register();\r\n","import { UserTypes, currentUser } from \"./user.interface\";\r\n\r\nexport interface UserState {\r\n  currentUser: currentUser | null;\r\n}\r\n\r\nconst INITIAL_STATE = {\r\n  currentUser: null,\r\n};\r\n\r\nexport default function (\r\n  state: UserState = INITIAL_STATE,\r\n  action: UserTypes\r\n): UserState {\r\n  switch (action.type) {\r\n    case \"SetUser\":\r\n      return {\r\n        ...state,\r\n        currentUser: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { AlertTypes, alert } from \"./alert.interface\";\r\n\r\nexport interface AlertState {\r\n  alerts: Array<alert>;\r\n}\r\n\r\nconst INITIAL_STATE = {\r\n  alerts: [],\r\n};\r\n\r\nexport default function (\r\n  state: AlertState = INITIAL_STATE,\r\n  action: AlertTypes\r\n): AlertState {\r\n  const { type, payload } = action;\r\n  switch (type) {\r\n    case \"SetAlert\":\r\n      return {\r\n        ...state,\r\n        alerts: [...state.alerts, payload],\r\n      };\r\n    case \"RemoveAlert\":\r\n      return {\r\n        ...state,\r\n        alerts: state.alerts.filter((alert) => alert.id !== payload.id),\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { PortTypes } from \"./port.interface\";\r\nimport { Portfolio } from \"src/generated/graphql\";\r\n\r\nexport interface PortState {\r\n  currentPort: Portfolio | null;\r\n  ports: Array<Portfolio> | [];\r\n}\r\n\r\nconst INITIAL_STATE = {\r\n  currentPort: null,\r\n  ports: [],\r\n};\r\n\r\nexport default function (\r\n  state: PortState = INITIAL_STATE,\r\n  action: PortTypes\r\n): PortState {\r\n  switch (action.type) {\r\n    case \"SetPort\":\r\n      return {\r\n        ...state,\r\n        currentPort: action.payload,\r\n      };\r\n    case \"SetPorts\":\r\n      return {\r\n        ...state,\r\n        ports: action.payload,\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","export interface LoadState {\r\n  isLoading: Boolean;\r\n}\r\n\r\ninterface LoaderTypes {\r\n  type: string;\r\n  payload: Boolean;\r\n}\r\n\r\nconst INITIAL_STATE = {\r\n  isLoading: false,\r\n};\r\n\r\nexport default function (\r\n  state: LoadState = INITIAL_STATE,\r\n  action: LoaderTypes\r\n): LoadState {\r\n  switch (action.type) {\r\n    case \"SetLoading\":\r\n      return {\r\n        ...state,\r\n        isLoading: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport userReducer, { UserState } from \"./User/user.reducer\";\r\nimport alertReducer, { AlertState } from \"./alert/alert.reducer\";\r\nimport portReducer, { PortState } from \"./Port/port.reducer\";\r\nimport loadReducer, { LoadState } from \"./loading/loading.reducer\";\r\n\r\nexport type MyReducers = {\r\n  userReducer: UserState;\r\n  alertReducer: AlertState;\r\n  portReducer: PortState;\r\n  loadReducer: LoadState;\r\n};\r\n\r\nexport default combineReducers({\r\n  userReducer,\r\n  alertReducer,\r\n  portReducer,\r\n  loadReducer,\r\n});\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport reduxThunk from \"redux-thunk\";\r\nimport rootReducer from \"./rootReducer\";\r\n\r\nconst middleWares: Array<any> = [reduxThunk];\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(...middleWares));\r\n\r\nexport default store;\r\n","import gql from 'graphql-tag';\r\nimport * as ApolloReactCommon from '@apollo/react-common';\r\nimport * as ApolloReactHooks from '@apollo/react-hooks';\r\nexport type Maybe<T> = T | null;\r\nexport type Exact<T extends { [key: string]: any }> = { [K in keyof T]: T[K] };\r\n/** All built-in and custom scalars, mapped to their actual values */\r\nexport type Scalars = {\r\n  ID: string;\r\n  String: string;\r\n  Boolean: boolean;\r\n  Int: number;\r\n  Float: number;\r\n  /** The javascript `Date` as string. Type represents date and time as the ISO Date string. */\r\n  DateTime: any;\r\n};\r\n\r\nexport type Query = {\r\n  __typename?: 'Query';\r\n  me: User;\r\n  hello: Scalars['String'];\r\n  users: Array<Maybe<User>>;\r\n  whoPort?: Maybe<Portfolio>;\r\n};\r\n\r\n\r\nexport type QueryWhoPortArgs = {\r\n  handlePath: Scalars['String'];\r\n};\r\n\r\n/** User model */\r\nexport type User = {\r\n  __typename?: 'User';\r\n  id: Scalars['ID'];\r\n  username: Scalars['String'];\r\n  email: Scalars['String'];\r\n  createdAt: Scalars['DateTime'];\r\n};\r\n\r\n\r\n/** Portfolio model */\r\nexport type Portfolio = {\r\n  __typename?: 'Portfolio';\r\n  id: Scalars['ID'];\r\n  handlePath: Scalars['String'];\r\n  avatar: Scalars['String'];\r\n  resume: Scalars['String'];\r\n  background: Scalars['String'];\r\n  name: Name;\r\n  social: Social;\r\n  works: Array<Works>;\r\n  contact: Contact;\r\n  about: Scalars['String'];\r\n  createdAt: Scalars['DateTime'];\r\n};\r\n\r\nexport type Name = {\r\n  __typename?: 'Name';\r\n  firstName: Scalars['String'];\r\n  lastName: Scalars['String'];\r\n  nickName: Scalars['String'];\r\n};\r\n\r\nexport type Social = {\r\n  __typename?: 'Social';\r\n  gitHup: Scalars['String'];\r\n  faceBook: Scalars['String'];\r\n  linkedIn: Scalars['String'];\r\n  twitter: Scalars['String'];\r\n};\r\n\r\nexport type Works = {\r\n  __typename?: 'Works';\r\n  id: Scalars['ID'];\r\n  name: Scalars['String'];\r\n  previewImage: Scalars['String'];\r\n  description: Scalars['String'];\r\n  viewDemo: Scalars['String'];\r\n  viewGitHup: Scalars['String'];\r\n  skillsUsed: Array<Scalars['String']>;\r\n};\r\n\r\nexport type Contact = {\r\n  __typename?: 'Contact';\r\n  email: Scalars['String'];\r\n  tel: Scalars['String'];\r\n};\r\n\r\nexport type Mutation = {\r\n  __typename?: 'Mutation';\r\n  logOut: Scalars['String'];\r\n  editLanding?: Maybe<Portfolio>;\r\n  editAbout?: Maybe<Portfolio>;\r\n  editResume: Portfolio;\r\n  editWork: Portfolio;\r\n  deleteWork: Portfolio;\r\n};\r\n\r\n\r\nexport type MutationEditLandingArgs = {\r\n  data: LandingInput;\r\n};\r\n\r\n\r\nexport type MutationEditAboutArgs = {\r\n  about: Scalars['String'];\r\n};\r\n\r\n\r\nexport type MutationEditResumeArgs = {\r\n  resume: Scalars['String'];\r\n};\r\n\r\n\r\nexport type MutationEditWorkArgs = {\r\n  work: WorkInput;\r\n};\r\n\r\n\r\nexport type MutationDeleteWorkArgs = {\r\n  workId: Scalars['String'];\r\n};\r\n\r\nexport type LandingInput = {\r\n  handlePath: Scalars['String'];\r\n  firstName: Scalars['String'];\r\n  lastName: Scalars['String'];\r\n  nickName: Scalars['String'];\r\n  avatar: Scalars['String'];\r\n  background: Scalars['String'];\r\n  linkedIn: Scalars['String'];\r\n  gitHup: Scalars['String'];\r\n  faceBook: Scalars['String'];\r\n  twitter: Scalars['String'];\r\n  email: Scalars['String'];\r\n  tel: Scalars['String'];\r\n};\r\n\r\nexport type WorkInput = {\r\n  id: Scalars['String'];\r\n  name: Scalars['String'];\r\n  previewImage: Scalars['String'];\r\n  description: Scalars['String'];\r\n  viewDemo: Scalars['String'];\r\n  viewGitHup: Scalars['String'];\r\n  skillsUsed: Array<Scalars['String']>;\r\n};\r\n\r\nexport type DeleteWorkMutationVariables = Exact<{\r\n  workId: Scalars['String'];\r\n}>;\r\n\r\n\r\nexport type DeleteWorkMutation = (\r\n  { __typename?: 'Mutation' }\r\n  & { deleteWork: (\r\n    { __typename?: 'Portfolio' }\r\n    & Pick<Portfolio, 'id' | 'avatar' | 'background' | 'handlePath' | 'about' | 'resume' | 'createdAt'>\r\n    & { name: (\r\n      { __typename?: 'Name' }\r\n      & Pick<Name, 'firstName' | 'lastName' | 'nickName'>\r\n    ), social: (\r\n      { __typename?: 'Social' }\r\n      & Pick<Social, 'gitHup' | 'faceBook' | 'linkedIn' | 'twitter'>\r\n    ), contact: (\r\n      { __typename?: 'Contact' }\r\n      & Pick<Contact, 'email' | 'tel'>\r\n    ), works: Array<(\r\n      { __typename?: 'Works' }\r\n      & Pick<Works, 'id' | 'name' | 'description' | 'previewImage' | 'viewDemo' | 'viewGitHup' | 'skillsUsed'>\r\n    )> }\r\n  ) }\r\n);\r\n\r\nexport type EditAboutMutationVariables = Exact<{\r\n  about: Scalars['String'];\r\n}>;\r\n\r\n\r\nexport type EditAboutMutation = (\r\n  { __typename?: 'Mutation' }\r\n  & { editAbout?: Maybe<(\r\n    { __typename?: 'Portfolio' }\r\n    & Pick<Portfolio, 'id' | 'avatar' | 'background' | 'handlePath' | 'about' | 'resume' | 'createdAt'>\r\n    & { name: (\r\n      { __typename?: 'Name' }\r\n      & Pick<Name, 'firstName' | 'lastName' | 'nickName'>\r\n    ), social: (\r\n      { __typename?: 'Social' }\r\n      & Pick<Social, 'gitHup' | 'faceBook' | 'linkedIn' | 'twitter'>\r\n    ), contact: (\r\n      { __typename?: 'Contact' }\r\n      & Pick<Contact, 'email' | 'tel'>\r\n    ), works: Array<(\r\n      { __typename?: 'Works' }\r\n      & Pick<Works, 'id' | 'name' | 'description' | 'previewImage' | 'viewDemo' | 'viewGitHup' | 'skillsUsed'>\r\n    )> }\r\n  )> }\r\n);\r\n\r\nexport type EditLandingMutationVariables = Exact<{\r\n  data: LandingInput;\r\n}>;\r\n\r\n\r\nexport type EditLandingMutation = (\r\n  { __typename?: 'Mutation' }\r\n  & { editLanding?: Maybe<(\r\n    { __typename?: 'Portfolio' }\r\n    & Pick<Portfolio, 'id' | 'avatar' | 'background' | 'handlePath' | 'about' | 'resume' | 'createdAt'>\r\n    & { name: (\r\n      { __typename?: 'Name' }\r\n      & Pick<Name, 'firstName' | 'lastName' | 'nickName'>\r\n    ), social: (\r\n      { __typename?: 'Social' }\r\n      & Pick<Social, 'gitHup' | 'faceBook' | 'linkedIn' | 'twitter'>\r\n    ), contact: (\r\n      { __typename?: 'Contact' }\r\n      & Pick<Contact, 'email' | 'tel'>\r\n    ), works: Array<(\r\n      { __typename?: 'Works' }\r\n      & Pick<Works, 'id' | 'name' | 'description' | 'previewImage' | 'viewDemo' | 'viewGitHup' | 'skillsUsed'>\r\n    )> }\r\n  )> }\r\n);\r\n\r\nexport type EditResumeMutationVariables = Exact<{\r\n  resume: Scalars['String'];\r\n}>;\r\n\r\n\r\nexport type EditResumeMutation = (\r\n  { __typename?: 'Mutation' }\r\n  & { editResume: (\r\n    { __typename?: 'Portfolio' }\r\n    & Pick<Portfolio, 'id' | 'avatar' | 'background' | 'handlePath' | 'about' | 'resume' | 'createdAt'>\r\n    & { name: (\r\n      { __typename?: 'Name' }\r\n      & Pick<Name, 'firstName' | 'lastName' | 'nickName'>\r\n    ), social: (\r\n      { __typename?: 'Social' }\r\n      & Pick<Social, 'gitHup' | 'faceBook' | 'linkedIn' | 'twitter'>\r\n    ), contact: (\r\n      { __typename?: 'Contact' }\r\n      & Pick<Contact, 'email' | 'tel'>\r\n    ), works: Array<(\r\n      { __typename?: 'Works' }\r\n      & Pick<Works, 'id' | 'name' | 'description' | 'previewImage' | 'viewDemo' | 'viewGitHup' | 'skillsUsed'>\r\n    )> }\r\n  ) }\r\n);\r\n\r\nexport type EditWorkMutationVariables = Exact<{\r\n  work: WorkInput;\r\n}>;\r\n\r\n\r\nexport type EditWorkMutation = (\r\n  { __typename?: 'Mutation' }\r\n  & { editWork: (\r\n    { __typename?: 'Portfolio' }\r\n    & Pick<Portfolio, 'id' | 'avatar' | 'background' | 'handlePath' | 'about' | 'resume' | 'createdAt'>\r\n    & { name: (\r\n      { __typename?: 'Name' }\r\n      & Pick<Name, 'firstName' | 'lastName' | 'nickName'>\r\n    ), social: (\r\n      { __typename?: 'Social' }\r\n      & Pick<Social, 'gitHup' | 'faceBook' | 'linkedIn' | 'twitter'>\r\n    ), contact: (\r\n      { __typename?: 'Contact' }\r\n      & Pick<Contact, 'email' | 'tel'>\r\n    ), works: Array<(\r\n      { __typename?: 'Works' }\r\n      & Pick<Works, 'id' | 'name' | 'description' | 'previewImage' | 'viewDemo' | 'viewGitHup' | 'skillsUsed'>\r\n    )> }\r\n  ) }\r\n);\r\n\r\nexport type HelloQueryVariables = Exact<{ [key: string]: never; }>;\r\n\r\n\r\nexport type HelloQuery = (\r\n  { __typename?: 'Query' }\r\n  & Pick<Query, 'hello'>\r\n);\r\n\r\nexport type LogOutMutationVariables = Exact<{ [key: string]: never; }>;\r\n\r\n\r\nexport type LogOutMutation = (\r\n  { __typename?: 'Mutation' }\r\n  & Pick<Mutation, 'logOut'>\r\n);\r\n\r\nexport type MeQueryVariables = Exact<{ [key: string]: never; }>;\r\n\r\n\r\nexport type MeQuery = (\r\n  { __typename?: 'Query' }\r\n  & { me: (\r\n    { __typename?: 'User' }\r\n    & Pick<User, 'id' | 'email' | 'username' | 'createdAt'>\r\n  ) }\r\n);\r\n\r\nexport type WhoPortQueryVariables = Exact<{\r\n  handlePath: Scalars['String'];\r\n}>;\r\n\r\n\r\nexport type WhoPortQuery = (\r\n  { __typename?: 'Query' }\r\n  & { whoPort?: Maybe<(\r\n    { __typename?: 'Portfolio' }\r\n    & Pick<Portfolio, 'id' | 'avatar' | 'background' | 'handlePath' | 'about' | 'resume' | 'createdAt'>\r\n    & { name: (\r\n      { __typename?: 'Name' }\r\n      & Pick<Name, 'firstName' | 'lastName' | 'nickName'>\r\n    ), social: (\r\n      { __typename?: 'Social' }\r\n      & Pick<Social, 'gitHup' | 'faceBook' | 'linkedIn' | 'twitter'>\r\n    ), contact: (\r\n      { __typename?: 'Contact' }\r\n      & Pick<Contact, 'email' | 'tel'>\r\n    ), works: Array<(\r\n      { __typename?: 'Works' }\r\n      & Pick<Works, 'id' | 'name' | 'description' | 'previewImage' | 'viewDemo' | 'viewGitHup' | 'skillsUsed'>\r\n    )> }\r\n  )> }\r\n);\r\n\r\n\r\nexport const DeleteWorkDocument = gql`\r\n    mutation deleteWork($workId: String!) {\r\n  deleteWork(workId: $workId) {\r\n    id\r\n    avatar\r\n    background\r\n    handlePath\r\n    name {\r\n      firstName\r\n      lastName\r\n      nickName\r\n    }\r\n    social {\r\n      gitHup\r\n      faceBook\r\n      linkedIn\r\n      twitter\r\n    }\r\n    contact {\r\n      email\r\n      tel\r\n    }\r\n    works {\r\n      id\r\n      name\r\n      description\r\n      previewImage\r\n      viewDemo\r\n      viewGitHup\r\n      skillsUsed\r\n    }\r\n    about\r\n    resume\r\n    createdAt\r\n  }\r\n}\r\n    `;\r\nexport type DeleteWorkMutationFn = ApolloReactCommon.MutationFunction<DeleteWorkMutation, DeleteWorkMutationVariables>;\r\n\r\n/**\r\n * __useDeleteWorkMutation__\r\n *\r\n * To run a mutation, you first call `useDeleteWorkMutation` within a React component and pass it any options that fit your needs.\r\n * When your component renders, `useDeleteWorkMutation` returns a tuple that includes:\r\n * - A mutate function that you can call at any time to execute the mutation\r\n * - An object with fields that represent the current status of the mutation's execution\r\n *\r\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\r\n *\r\n * @example\r\n * const [deleteWorkMutation, { data, loading, error }] = useDeleteWorkMutation({\r\n *   variables: {\r\n *      workId: // value for 'workId'\r\n *   },\r\n * });\r\n */\r\nexport function useDeleteWorkMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<DeleteWorkMutation, DeleteWorkMutationVariables>) {\r\n        return ApolloReactHooks.useMutation<DeleteWorkMutation, DeleteWorkMutationVariables>(DeleteWorkDocument, baseOptions);\r\n      }\r\nexport type DeleteWorkMutationHookResult = ReturnType<typeof useDeleteWorkMutation>;\r\nexport type DeleteWorkMutationResult = ApolloReactCommon.MutationResult<DeleteWorkMutation>;\r\nexport type DeleteWorkMutationOptions = ApolloReactCommon.BaseMutationOptions<DeleteWorkMutation, DeleteWorkMutationVariables>;\r\nexport const EditAboutDocument = gql`\r\n    mutation editAbout($about: String!) {\r\n  editAbout(about: $about) {\r\n    id\r\n    avatar\r\n    background\r\n    handlePath\r\n    name {\r\n      firstName\r\n      lastName\r\n      nickName\r\n    }\r\n    social {\r\n      gitHup\r\n      faceBook\r\n      linkedIn\r\n      twitter\r\n    }\r\n    contact {\r\n      email\r\n      tel\r\n    }\r\n    works {\r\n      id\r\n      name\r\n      description\r\n      previewImage\r\n      viewDemo\r\n      viewGitHup\r\n      skillsUsed\r\n    }\r\n    about\r\n    resume\r\n    createdAt\r\n  }\r\n}\r\n    `;\r\nexport type EditAboutMutationFn = ApolloReactCommon.MutationFunction<EditAboutMutation, EditAboutMutationVariables>;\r\n\r\n/**\r\n * __useEditAboutMutation__\r\n *\r\n * To run a mutation, you first call `useEditAboutMutation` within a React component and pass it any options that fit your needs.\r\n * When your component renders, `useEditAboutMutation` returns a tuple that includes:\r\n * - A mutate function that you can call at any time to execute the mutation\r\n * - An object with fields that represent the current status of the mutation's execution\r\n *\r\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\r\n *\r\n * @example\r\n * const [editAboutMutation, { data, loading, error }] = useEditAboutMutation({\r\n *   variables: {\r\n *      about: // value for 'about'\r\n *   },\r\n * });\r\n */\r\nexport function useEditAboutMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<EditAboutMutation, EditAboutMutationVariables>) {\r\n        return ApolloReactHooks.useMutation<EditAboutMutation, EditAboutMutationVariables>(EditAboutDocument, baseOptions);\r\n      }\r\nexport type EditAboutMutationHookResult = ReturnType<typeof useEditAboutMutation>;\r\nexport type EditAboutMutationResult = ApolloReactCommon.MutationResult<EditAboutMutation>;\r\nexport type EditAboutMutationOptions = ApolloReactCommon.BaseMutationOptions<EditAboutMutation, EditAboutMutationVariables>;\r\nexport const EditLandingDocument = gql`\r\n    mutation editLanding($data: LandingInput!) {\r\n  editLanding(data: $data) {\r\n    id\r\n    avatar\r\n    background\r\n    handlePath\r\n    name {\r\n      firstName\r\n      lastName\r\n      nickName\r\n    }\r\n    social {\r\n      gitHup\r\n      faceBook\r\n      linkedIn\r\n      twitter\r\n    }\r\n    contact {\r\n      email\r\n      tel\r\n    }\r\n    works {\r\n      id\r\n      name\r\n      description\r\n      previewImage\r\n      viewDemo\r\n      viewGitHup\r\n      skillsUsed\r\n    }\r\n    about\r\n    resume\r\n    createdAt\r\n  }\r\n}\r\n    `;\r\nexport type EditLandingMutationFn = ApolloReactCommon.MutationFunction<EditLandingMutation, EditLandingMutationVariables>;\r\n\r\n/**\r\n * __useEditLandingMutation__\r\n *\r\n * To run a mutation, you first call `useEditLandingMutation` within a React component and pass it any options that fit your needs.\r\n * When your component renders, `useEditLandingMutation` returns a tuple that includes:\r\n * - A mutate function that you can call at any time to execute the mutation\r\n * - An object with fields that represent the current status of the mutation's execution\r\n *\r\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\r\n *\r\n * @example\r\n * const [editLandingMutation, { data, loading, error }] = useEditLandingMutation({\r\n *   variables: {\r\n *      data: // value for 'data'\r\n *   },\r\n * });\r\n */\r\nexport function useEditLandingMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<EditLandingMutation, EditLandingMutationVariables>) {\r\n        return ApolloReactHooks.useMutation<EditLandingMutation, EditLandingMutationVariables>(EditLandingDocument, baseOptions);\r\n      }\r\nexport type EditLandingMutationHookResult = ReturnType<typeof useEditLandingMutation>;\r\nexport type EditLandingMutationResult = ApolloReactCommon.MutationResult<EditLandingMutation>;\r\nexport type EditLandingMutationOptions = ApolloReactCommon.BaseMutationOptions<EditLandingMutation, EditLandingMutationVariables>;\r\nexport const EditResumeDocument = gql`\r\n    mutation editResume($resume: String!) {\r\n  editResume(resume: $resume) {\r\n    id\r\n    avatar\r\n    background\r\n    handlePath\r\n    name {\r\n      firstName\r\n      lastName\r\n      nickName\r\n    }\r\n    social {\r\n      gitHup\r\n      faceBook\r\n      linkedIn\r\n      twitter\r\n    }\r\n    contact {\r\n      email\r\n      tel\r\n    }\r\n    works {\r\n      id\r\n      name\r\n      description\r\n      previewImage\r\n      viewDemo\r\n      viewGitHup\r\n      skillsUsed\r\n    }\r\n    about\r\n    resume\r\n    createdAt\r\n  }\r\n}\r\n    `;\r\nexport type EditResumeMutationFn = ApolloReactCommon.MutationFunction<EditResumeMutation, EditResumeMutationVariables>;\r\n\r\n/**\r\n * __useEditResumeMutation__\r\n *\r\n * To run a mutation, you first call `useEditResumeMutation` within a React component and pass it any options that fit your needs.\r\n * When your component renders, `useEditResumeMutation` returns a tuple that includes:\r\n * - A mutate function that you can call at any time to execute the mutation\r\n * - An object with fields that represent the current status of the mutation's execution\r\n *\r\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\r\n *\r\n * @example\r\n * const [editResumeMutation, { data, loading, error }] = useEditResumeMutation({\r\n *   variables: {\r\n *      resume: // value for 'resume'\r\n *   },\r\n * });\r\n */\r\nexport function useEditResumeMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<EditResumeMutation, EditResumeMutationVariables>) {\r\n        return ApolloReactHooks.useMutation<EditResumeMutation, EditResumeMutationVariables>(EditResumeDocument, baseOptions);\r\n      }\r\nexport type EditResumeMutationHookResult = ReturnType<typeof useEditResumeMutation>;\r\nexport type EditResumeMutationResult = ApolloReactCommon.MutationResult<EditResumeMutation>;\r\nexport type EditResumeMutationOptions = ApolloReactCommon.BaseMutationOptions<EditResumeMutation, EditResumeMutationVariables>;\r\nexport const EditWorkDocument = gql`\r\n    mutation editWork($work: WorkInput!) {\r\n  editWork(work: $work) {\r\n    id\r\n    avatar\r\n    background\r\n    handlePath\r\n    name {\r\n      firstName\r\n      lastName\r\n      nickName\r\n    }\r\n    social {\r\n      gitHup\r\n      faceBook\r\n      linkedIn\r\n      twitter\r\n    }\r\n    contact {\r\n      email\r\n      tel\r\n    }\r\n    works {\r\n      id\r\n      name\r\n      description\r\n      previewImage\r\n      viewDemo\r\n      viewGitHup\r\n      skillsUsed\r\n    }\r\n    about\r\n    resume\r\n    createdAt\r\n  }\r\n}\r\n    `;\r\nexport type EditWorkMutationFn = ApolloReactCommon.MutationFunction<EditWorkMutation, EditWorkMutationVariables>;\r\n\r\n/**\r\n * __useEditWorkMutation__\r\n *\r\n * To run a mutation, you first call `useEditWorkMutation` within a React component and pass it any options that fit your needs.\r\n * When your component renders, `useEditWorkMutation` returns a tuple that includes:\r\n * - A mutate function that you can call at any time to execute the mutation\r\n * - An object with fields that represent the current status of the mutation's execution\r\n *\r\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\r\n *\r\n * @example\r\n * const [editWorkMutation, { data, loading, error }] = useEditWorkMutation({\r\n *   variables: {\r\n *      work: // value for 'work'\r\n *   },\r\n * });\r\n */\r\nexport function useEditWorkMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<EditWorkMutation, EditWorkMutationVariables>) {\r\n        return ApolloReactHooks.useMutation<EditWorkMutation, EditWorkMutationVariables>(EditWorkDocument, baseOptions);\r\n      }\r\nexport type EditWorkMutationHookResult = ReturnType<typeof useEditWorkMutation>;\r\nexport type EditWorkMutationResult = ApolloReactCommon.MutationResult<EditWorkMutation>;\r\nexport type EditWorkMutationOptions = ApolloReactCommon.BaseMutationOptions<EditWorkMutation, EditWorkMutationVariables>;\r\nexport const HelloDocument = gql`\r\n    query hello {\r\n  hello\r\n}\r\n    `;\r\n\r\n/**\r\n * __useHelloQuery__\r\n *\r\n * To run a query within a React component, call `useHelloQuery` and pass it any options that fit your needs.\r\n * When your component renders, `useHelloQuery` returns an object from Apollo Client that contains loading, error, and data properties\r\n * you can use to render your UI.\r\n *\r\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\r\n *\r\n * @example\r\n * const { data, loading, error } = useHelloQuery({\r\n *   variables: {\r\n *   },\r\n * });\r\n */\r\nexport function useHelloQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<HelloQuery, HelloQueryVariables>) {\r\n        return ApolloReactHooks.useQuery<HelloQuery, HelloQueryVariables>(HelloDocument, baseOptions);\r\n      }\r\nexport function useHelloLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<HelloQuery, HelloQueryVariables>) {\r\n          return ApolloReactHooks.useLazyQuery<HelloQuery, HelloQueryVariables>(HelloDocument, baseOptions);\r\n        }\r\nexport type HelloQueryHookResult = ReturnType<typeof useHelloQuery>;\r\nexport type HelloLazyQueryHookResult = ReturnType<typeof useHelloLazyQuery>;\r\nexport type HelloQueryResult = ApolloReactCommon.QueryResult<HelloQuery, HelloQueryVariables>;\r\nexport const LogOutDocument = gql`\r\n    mutation logOut {\r\n  logOut\r\n}\r\n    `;\r\nexport type LogOutMutationFn = ApolloReactCommon.MutationFunction<LogOutMutation, LogOutMutationVariables>;\r\n\r\n/**\r\n * __useLogOutMutation__\r\n *\r\n * To run a mutation, you first call `useLogOutMutation` within a React component and pass it any options that fit your needs.\r\n * When your component renders, `useLogOutMutation` returns a tuple that includes:\r\n * - A mutate function that you can call at any time to execute the mutation\r\n * - An object with fields that represent the current status of the mutation's execution\r\n *\r\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\r\n *\r\n * @example\r\n * const [logOutMutation, { data, loading, error }] = useLogOutMutation({\r\n *   variables: {\r\n *   },\r\n * });\r\n */\r\nexport function useLogOutMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<LogOutMutation, LogOutMutationVariables>) {\r\n        return ApolloReactHooks.useMutation<LogOutMutation, LogOutMutationVariables>(LogOutDocument, baseOptions);\r\n      }\r\nexport type LogOutMutationHookResult = ReturnType<typeof useLogOutMutation>;\r\nexport type LogOutMutationResult = ApolloReactCommon.MutationResult<LogOutMutation>;\r\nexport type LogOutMutationOptions = ApolloReactCommon.BaseMutationOptions<LogOutMutation, LogOutMutationVariables>;\r\nexport const MeDocument = gql`\r\n    query me {\r\n  me {\r\n    id\r\n    email\r\n    username\r\n    createdAt\r\n  }\r\n}\r\n    `;\r\n\r\n/**\r\n * __useMeQuery__\r\n *\r\n * To run a query within a React component, call `useMeQuery` and pass it any options that fit your needs.\r\n * When your component renders, `useMeQuery` returns an object from Apollo Client that contains loading, error, and data properties\r\n * you can use to render your UI.\r\n *\r\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\r\n *\r\n * @example\r\n * const { data, loading, error } = useMeQuery({\r\n *   variables: {\r\n *   },\r\n * });\r\n */\r\nexport function useMeQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<MeQuery, MeQueryVariables>) {\r\n        return ApolloReactHooks.useQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions);\r\n      }\r\nexport function useMeLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<MeQuery, MeQueryVariables>) {\r\n          return ApolloReactHooks.useLazyQuery<MeQuery, MeQueryVariables>(MeDocument, baseOptions);\r\n        }\r\nexport type MeQueryHookResult = ReturnType<typeof useMeQuery>;\r\nexport type MeLazyQueryHookResult = ReturnType<typeof useMeLazyQuery>;\r\nexport type MeQueryResult = ApolloReactCommon.QueryResult<MeQuery, MeQueryVariables>;\r\nexport const WhoPortDocument = gql`\r\n    query whoPort($handlePath: String!) {\r\n  whoPort(handlePath: $handlePath) {\r\n    id\r\n    avatar\r\n    background\r\n    handlePath\r\n    name {\r\n      firstName\r\n      lastName\r\n      nickName\r\n    }\r\n    social {\r\n      gitHup\r\n      faceBook\r\n      linkedIn\r\n      twitter\r\n    }\r\n    contact {\r\n      email\r\n      tel\r\n    }\r\n    works {\r\n      id\r\n      name\r\n      description\r\n      previewImage\r\n      viewDemo\r\n      viewGitHup\r\n      skillsUsed\r\n    }\r\n    about\r\n    resume\r\n    createdAt\r\n  }\r\n}\r\n    `;\r\n\r\n/**\r\n * __useWhoPortQuery__\r\n *\r\n * To run a query within a React component, call `useWhoPortQuery` and pass it any options that fit your needs.\r\n * When your component renders, `useWhoPortQuery` returns an object from Apollo Client that contains loading, error, and data properties\r\n * you can use to render your UI.\r\n *\r\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\r\n *\r\n * @example\r\n * const { data, loading, error } = useWhoPortQuery({\r\n *   variables: {\r\n *      handlePath: // value for 'handlePath'\r\n *   },\r\n * });\r\n */\r\nexport function useWhoPortQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<WhoPortQuery, WhoPortQueryVariables>) {\r\n        return ApolloReactHooks.useQuery<WhoPortQuery, WhoPortQueryVariables>(WhoPortDocument, baseOptions);\r\n      }\r\nexport function useWhoPortLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<WhoPortQuery, WhoPortQueryVariables>) {\r\n          return ApolloReactHooks.useLazyQuery<WhoPortQuery, WhoPortQueryVariables>(WhoPortDocument, baseOptions);\r\n        }\r\nexport type WhoPortQueryHookResult = ReturnType<typeof useWhoPortQuery>;\r\nexport type WhoPortLazyQueryHookResult = ReturnType<typeof useWhoPortLazyQuery>;\r\nexport type WhoPortQueryResult = ApolloReactCommon.QueryResult<WhoPortQuery, WhoPortQueryVariables>;","import React, {\r\n  createContext,\r\n  useState,\r\n  ReactNode,\r\n  SetStateAction,\r\n  Dispatch,\r\n} from \"react\";\r\n\r\ntype MyProps = {\r\n  children: ReactNode;\r\n};\r\n\r\nexport type MyOffSet = {\r\n  landing: number | undefined;\r\n  project: number | undefined;\r\n  about: number | undefined;\r\n\r\n  resume: number | undefined;\r\n};\r\n\r\nexport type MyStoreOffset = {\r\n  offset: MyOffSet;\r\n  setOffSet: Dispatch<SetStateAction<MyOffSet>>;\r\n};\r\n\r\nexport const OffSetContext = createContext<MyStoreOffset | {}>({});\r\n\r\nexport const OffSetContextProvider = ({\r\n  children,\r\n}: MyProps): React.ReactElement => {\r\n  const [offset, setOffSet] = useState({\r\n    landing: 0,\r\n    project: 0,\r\n    about: 0,\r\n    resume: 0,\r\n  });\r\n\r\n  const store = {\r\n    offset,\r\n    setOffSet,\r\n  };\r\n\r\n  return (\r\n    <OffSetContext.Provider value={store}>{children}</OffSetContext.Provider>\r\n  );\r\n};\r\n"],"sourceRoot":""}